from typing import Dict, Callable, TypeVar, Any, List
from my_id import MyID

T = TypeVar('T')

class Registrar:
    '''
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º uid.
    '''
    
    _global_pools: Dict[str, 'Registrar'] = {}
    
    def __new__(cls, name: str) -> 'Registrar':
        '''–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π'''
        if name in cls._global_pools:
            return cls._global_pools[name]
        else:
            instance = super().__new__(cls)
            cls._global_pools[name] = instance
            return instance
    
    def __init__(self, name: str) -> None:
        if not hasattr(self, 'name'):
            self.name = name
            self._function_pool: Dict[str, Callable[..., Any]] = {}
    
    def register(self, uid: str = None) -> Callable[[T], T]:
        '''
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
        
        Args:
            uid: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. –ï—Å–ª–∏ None - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è uid.
        '''
        def decorator(func: T) -> T:
            actual_uid = uid or MyID()
            if actual_uid in self._function_pool:
                raise KeyError(f"–§—É–Ω–∫—Ü–∏—è '{actual_uid}' —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ '{self.name}'")
            self._function_pool[actual_uid] = func
            return func
        return decorator
    
    def __getitem__(self, uid: str) -> Callable[..., Any]:
        '''–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —á–µ—Ä–µ–∑ registrar['uid']'''
        if uid not in self._function_pool:
            raise KeyError(f"–§—É–Ω–∫—Ü–∏—è '{uid}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç '{self.name}'")
        return self._function_pool[uid]
    
    def __setitem__(self, uid: str, func: Callable[..., Any]) -> None:
        '''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ registrar['uid'] = func'''
        if uid in self._function_pool:
            raise KeyError(f"–§—É–Ω–∫—Ü–∏—è '{uid}' —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ '{self.name}'")
        self._function_pool[uid] = func
    
    def __contains__(self, uid: str) -> bool:
        '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ—É–Ω–∫—Ü–∏–∏'''
        return uid in self._function_pool
    
    @property
    def functions(self) -> List[Callable[..., Any]]:
        '''–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π'''
        return list(self._function_pool.values())
    
    @classmethod
    def register_to(cls, pool_name: str, uid: str = None) -> Callable[[T], T]:
        '''–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä—è–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É–ª'''
        def decorator(func: T) -> T:
            pool = Registrar(pool_name)
            return pool.register(uid)(func)
        return decorator
    
    def keys(self):
        return self._function_pool.keys()
    
    def values(self):
        return self._function_pool.values()
    
    def items(self):
        return self._function_pool.items()
    
    def __repr__(self) -> str:
        return f"Registrar(name='{self.name}', functions={len(self._function_pool)})"


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø—É–ª—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    startup = Registrar('startup')
    math = Registrar('math')
    
    # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    @startup.register()
    def db_init():
        print("   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        return "db_ok"
    
    @math.register('sum')
    def sum(a, b):
        return a + b
    
    @Registrar.register_to('math', 'multiply')
    def multiply(a, b):
        return a * b
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø—É–ª
    math2 = Registrar('math')
    print(f"–≠—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç: {math is math2}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ math2: {len(list(math2.keys()))}")
    
    # 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print(f"   math['sum'](2, 3) = {math['sum'](2, 3)}")
    print(f"   math['multiply'](4, 5) = {math['multiply'](4, 5)}")
    
    # 4. –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
    math['power'] = lambda a, b: a ** b
    print(f"   math['power'](2, 3) = {math['power'](2, 3)}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞: 'sum' –≤ math: {'sum' in math}")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: 'divide' –≤ math: {'divide' in math}")
    
    # 6. –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
    print("\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ math:")
    for func in math.values():
        print(f"   {func.__name__}")
    
    # 7. –ó–∞–ø—É—Å–∫ startup
    print("\nStartup –∑–∞–¥–∞—á–∏:")
    for uid, func in startup.items():
        result = func()
        print(f"   {uid}: {result}")
